[{"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/index.js":"1","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/App.js":"2","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/reportWebVitals.js":"3","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Router/Router.jsx":"4","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Pages/EpubPage.jsx":"5","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Pages/PdfPage.jsx":"6","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Pages/HomePage.jsx":"7","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Components/Nav.jsx":"8","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Components/Drop.jsx":"9","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Config/Api.js":"10","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Components/FileDisplay.jsx":"11","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Config/env.js":"12"},{"size":500,"mtime":1611452820685,"results":"13","hashOfConfig":"14"},{"size":1078,"mtime":1611452820685,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1611452820685,"results":"16","hashOfConfig":"14"},{"size":607,"mtime":1611452820685,"results":"17","hashOfConfig":"14"},{"size":255,"mtime":1611452820685,"results":"18","hashOfConfig":"14"},{"size":249,"mtime":1611452820685,"results":"19","hashOfConfig":"14"},{"size":156,"mtime":1611452820685,"results":"20","hashOfConfig":"14"},{"size":672,"mtime":1611452820685,"results":"21","hashOfConfig":"14"},{"size":6213,"mtime":1611468768223,"results":"22","hashOfConfig":"14"},{"size":537,"mtime":1611452820685,"results":"23","hashOfConfig":"14"},{"size":1542,"mtime":1611722178396,"results":"24","hashOfConfig":"14"},{"size":50,"mtime":1611452820685,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1klpbf8",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/index.js",[],["54","55"],"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/App.js",[],"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/reportWebVitals.js",[],"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Router/Router.jsx",[],"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Pages/EpubPage.jsx",[],"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Pages/PdfPage.jsx",[],"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Pages/HomePage.jsx",[],"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Components/Nav.jsx",["56","57","58","59"],"import React from \"react\";\nimport  {Nav, Button, NavDropdown, Form, Navbar, FormControl} from \"react-bootstrap\";\n\nexport default function Navbr(){\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"/\">Konverter</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"/pdf\">PDF</Nav.Link>\n                    <Nav.Link href=\"/epub\">ePub</Nav.Link>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Components/Drop.jsx",["60","61","62"],"import React, {useCallback, useState} from 'react'\nimport Dropzone from 'react-dropzone'\nimport {Container, Row, Col, Button} from 'react-bootstrap'\nimport \"../Style/drop.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {postFile, postFiles} from '../Config/Api'\nimport FileDisplay from \"./FileDisplay\";\nimport {useMonitorOutput} from \"react-dnd/lib/hooks/internal/useMonitorOutput\";\n\nfunction Drop(props) {\n\n    const [btn, setBtn] = useState();\n    const [fileDisplay, setFileDisplay] = useState([])\n    const [files, setFiles] = useState([])\n    let fileArr = []\n\n\n    const onDrop = useCallback((acceptedFiles) =>{\n        acceptedFiles.forEach((file) =>{\n\n            const reader = new FileReader();\n            reader.onabort = () => {\n\n            }\n\n            reader.onerror = () =>{\n\n            }\n\n            reader.onload = () =>{\n                fileArr.push(<FileDisplay\n                    file={file}\n                    key={fileArr.length+1}\n                    duration={fileArr.length*1000}\n                />)\n                setFileDisplay(fileDisplay)\n                setFileDisplay(fileArr)\n                files.push(file)\n                setFiles(files)\n            }\n            reader.readAsArrayBuffer(file)\n\n        })\n        // acceptedFiles.forEach((file) =>{\n        //     const reader = new FileReader()\n        //\n        //     console.log(props)\n        //\n        //     reader.onabort = () => console.log(\"Aborting file reading.\")\n        //     reader.onerror = () => console.log(\"Error while reading file\")\n        //     reader.onload = () => {\n        //         postFile(file, props.req, props.extra)\n        //             .then((res) =>{\n        //                 const url = window.URL.createObjectURL(new Blob([res.data]));\n        //                 if(btn !== undefined){\n        //                     setBtn(undefined);\n        //                 }\n        //                 setBtn(\n        //                     <a\n        //                         className={`btn shadow `}\n        //                         id={`${props.req}-drop`}\n        //                         href={url}\n        //                         download={`${file.name.split(\".\")[0]}.${props.req}`}\n        //                         data-aos={\"zoom-in-up\"}\n        //                         data-aos-duration={1000}\n        //                     >\n        //                         <strong>Download</strong>\n        //                     </a>\n        //                 )\n        //             })\n        //\n        //     }\n        //\n        //     reader.readAsArrayBuffer(file);\n        // })\n    }, [])\n\n    const onClickConvert = () =>{\n        postFiles(props.req, props.extra, files)\n            .then((res) =>{\n                const url = window.URL.createObjectURL(new Blob([res.data]))\n                if(btn !== undefined){\n                    setBtn(undefined)\n                }\n\n                setBtn(\n                    <a\n                        className={`btn shadow `}\n                        id={`${props.req}-drop`}\n                        href={url}\n                        download={`${files[0].name.split(\".\")[0]}.${props.req}`}\n                        data-aos={\"zoom-in-up\"}\n                        data-aos-duration={1000}\n                    >\n                        <strong>Download</strong>\n                    </a>\n                )\n\n            }).catch((err) =>{\n                console.log(err)\n            })\n    }\n\n    return (\n        <div style={{\n            paddingTop: \"5%%\"\n        }}>\n            <Container style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                marginBottom: \"20px\"\n            }}>\n                <Row>\n                    {fileDisplay}\n                </Row>\n            </Container>\n            <Container style={{\n                display: \"flex\",\n                justifyContent: \"center\"\n            }} >\n\n                <Row>\n                    <Col className={\"shadow\"} style={{\n                        padding: \"0\",\n                        borderRadius: \"5px\"\n                    }}>\n                        <Dropzone onDrop={onDrop} multiple={true}>\n                            {({getRootProps, getInputProps}) => (\n                                <section>\n                                    <div {...getRootProps()} className=\"drop-box\" >\n                                        <input {...getInputProps()} />\n                                        <Row>\n                                            <Col>\n                                                <Button variant=\"light\" className=\"input-button\" >\n                                                    Click here\n                                                </Button>\n                                            </Col>\n\n                                        </Row>\n                                        <Row>\n                                            <Col>\n                                                <p className=\"drop-text\">\n                                                    Or drag and drop a file\n                                                </p>\n                                            </Col>\n                                        </Row>\n\n                                    </div>\n                                </section>\n                            )}\n                        </Dropzone>\n                    </Col>\n                </Row>\n\n            </Container>\n            <Container style={{\n                display: \"flex\",\n                justifyContent: \"center\"\n            }}>\n                <Row>\n                    {btn? btn : <Button\n                        variant={\"success\"}\n                        onClick={onClickConvert}\n                        style={{\n                            marginTop: \"20px\"\n                        }}\n                    >\n                        Convert\n                    </Button>}\n                </Row>\n                <Row>\n                    <Col>\n                        {btn}\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n\n    )\n\n}\n\nexport default Drop;\n","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Config/Api.js",["63"],"import axios from 'axios';\nimport {mainUrl} from '../Config/env'\n\nexport function postFiles( req, extra, files) {\n    let formData = new FormData();\n\n    let count = 0;\n    files.forEach((file)=>{\n        formData.append(`files`, file)\n    })\n    formData.append(\"options\", extra)\n\n    return axios.post(`${mainUrl}/convert/${req}`,\n        formData,\n        {\n            headers: {\n                \"Content-Type\": \"multipart/form-data; boundary=----------287032381131322\"\n            },\n            responseType: \"blob\"\n        })\n}\n\n\n","/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Components/FileDisplay.jsx",["64"],"/home/Alex-Fed/IdeaProjects/epubmaker/pictopdf-frontend/src/Config/env.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":15,"nodeType":"71","messageId":"72","endLine":2,"endColumn":21},{"ruleId":"69","severity":1,"message":"73","line":2,"column":23,"nodeType":"71","messageId":"72","endLine":2,"endColumn":34},{"ruleId":"69","severity":1,"message":"74","line":2,"column":36,"nodeType":"71","messageId":"72","endLine":2,"endColumn":40},{"ruleId":"69","severity":1,"message":"75","line":2,"column":50,"nodeType":"71","messageId":"72","endLine":2,"endColumn":61},{"ruleId":"69","severity":1,"message":"76","line":6,"column":9,"nodeType":"71","messageId":"72","endLine":6,"endColumn":17},{"ruleId":"69","severity":1,"message":"77","line":8,"column":9,"nodeType":"71","messageId":"72","endLine":8,"endColumn":25},{"ruleId":"78","severity":1,"message":"79","line":76,"column":8,"nodeType":"80","endLine":76,"endColumn":10,"suggestions":"81"},{"ruleId":"69","severity":1,"message":"82","line":7,"column":9,"nodeType":"71","messageId":"72","endLine":7,"endColumn":14},{"ruleId":"69","severity":1,"message":"83","line":1,"column":16,"nodeType":"71","messageId":"72","endLine":1,"endColumn":24},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'NavDropdown' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.","'postFile' is defined but never used.","'useMonitorOutput' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'fileArr', 'fileDisplay', and 'files'. Either include them or remove the dependency array. You can also do a functional update 'setFileDisplay(f => ...)' if you only need 'fileDisplay' in the 'setFileDisplay' call.","ArrayExpression",["86"],"'count' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [fileArr, fileDisplay, files]",{"range":"89","text":"90"},[2652,2654],"[fileArr, fileDisplay, files]"]